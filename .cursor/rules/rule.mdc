---
description: 
globs: 
alwaysApply: true
---

あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

まず、ユーザーから受け取った指示を確認します：

<指示>
{{instructions}}
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください。なお、すべての提案と実装は、記載された技術スタックの制約内で行ってください：

1. 指示の分析と計画
<タスク分析>
- 主要なタスクを簡潔に要約してください。
- 記載された技術スタックを確認し、その制約内での実装方法を検討してください。
- 重要な要件と制約を特定してください。
- 潜在的な課題をリストアップしてください。
- タスク実行のための具体的なステップを詳細に列挙してください。
- それらのステップの最適な実行順序を決定してください。
- 必要となる可能性のあるツールやリソースを考慮してください。

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
</タスク分析>

2. タスクの実行
- 特定したステップを一つずつ実行してください。
- 各ステップの完了後、簡潔に進捗を報告してください。
- 実行中に問題や疑問が生じた場合は、即座に報告し、対応策を提案してください。

3. 品質管理
- 各タスクの実行結果を迅速に検証してください。
- エラーや不整合を発見した場合は、直ちに修正アクションを実施してください。
- コマンドを実行する場合は、必ず標準出力を確認し、結果を報告してください。

4. 最終確認
- すべてのタスクが完了したら、成果物全体を評価してください。
- 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。

5. 結果報告
以下のフォーマットで最終的な結果を報告してください：

# 実行結果報告

## 概要
[全体の要約を簡潔に記述]

## 実行ステップ
1. [ステップ1の説明と結果]
2. [ステップ2の説明と結果]
...

## 最終成果物
[成果物の詳細や、該当する場合はリンクなど]

## 技術的考慮事項
- [使用した技術スタックの要素]
- [技術的な制約とその対応]

## 注意点・改善提案
- [気づいた点や改善提案があれば記述]
```

重要な注意事項：
- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。

このプロセスに従って、効率的かつ正確にタスクを遂行してください。

以下は、フロントエンドの開発において、機能ごとに整理されたコンポーネントやロジックを管理するためのベストプラクティスを反映しています。


## 概要
- NextjsのApp Routerを使用したルーティング
- Feature-based Architectureを使用

## ディレクトリ構造
- 機能ごとの分割: 各機能は独立したディレクトリに分割され、その中にコンポーネント、フック、操作、バリデーション、ルーティングなどを含む。
- 責務の分離: UI層（表示）とロジック層（データ取得・処理）を明確に分離し、コンポーネントをシンプルに保つ。
- 共通化可能な処理の抽出: 複数の機能で利用される共通処理は、`utils` ディレクトリに配置し、再利用性を高める。


├─ app/                   # Next.jsのアプリケーションルート
├─ features/             # 機能ごとのモジュール
│  └─ /post             # 投稿機能に関連するモジュール
│     ├─ components/    # 投稿関連のコンポーネント
│        ├─ Post.tsx    # 単一投稿表示コンポーネント
│        └─ Posts.tsx   # 投稿一覧表示コンポーネント
│     ├─ hooks/         # 投稿関連のカスタムフック
│        └─ usePost.ts  # 投稿データ操作用フック
│     └─ types/         # 投稿関連の型定義
├─ components/          # 共通コンポーネント
├─ shadcn/             # shadcn UIライブラリ関連
│  ├─ ui/              # UIコンポーネント
├─ hooks/              # 共通カスタムフック
├─ libs/               # ユーティリティライブラリ
│  └─ utils/           # 汎用ユーティリティ関数



## 環境
- Node.js　22.14.0
  - JavaScript実行環境
- Next.js: 15.2.4
  - Reactベースのフレームワーク
  - App Router対応
- TypeScript: ^5
  - 型安全なJavaScript

## 依存パッケージ

### メイン依存関係
- next: 15.2.4
  - Next.jsフレームワーク
- react: ^19.0.0
  - UIライブラリ
- react-dom: ^19.0.0
  - ReactのDOMレンダリング
- @radix-ui/react-slot: ^1.1.2
  - アクセシビリティ対応のUIコンポーネント
- class-variance-authority: ^0.7.1
  - クラス名のバリエーション管理
- clsx: ^2.1.1
  - 条件付きクラス名の管理
- lucide-react: ^0.487.0
  - アイコンライブラリ
- tailwind-merge: ^3.1.0
  - Tailwind CSSのクラス名マージ
- tailwind-variants: ^1.0.0
  - Tailwind CSSのバリエーション管理
- tw-animate-css: ^1.2.5
  - Tailwind CSSのアニメーション

### 開発依存関係
- @biomejs/biome: 1.9.4
  - コードフォーマッター・リンター
- @types/node: ^20
  - Node.jsの型定義
- @types/react: ^19
  - Reactの型定義
- @types/react-dom: ^19
  - React DOMの型定義
- @typescript-eslint/eslint-plugin: ^8.29.0
  - TypeScript用ESLintプラグイン
- @typescript-eslint/parser: ^8.29.0
  - TypeScript用ESLintパーサー
- eslint: ^9.23.0
  - JavaScript/TypeScriptのリンター
- eslint-config-next: 15.2.4
  - Next.js用ESLint設定
- eslint-config-prettier: ^10.1.1
  - Prettierとの互換性設定
- eslint-plugin-import: ^2.31.0
  - インポート文のリンター
- eslint-plugin-react: ^7.37.4
  - React用ESLintプラグイン
- eslint-plugin-react-hooks: ^5.2.0
  - React Hooks用ESLintプラグイン
- eslint-plugin-unused-imports: ^4.1.4
  - 未使用インポートの検出
- lefthook: ^1.11.6
  - Gitフック管理
- prettier: ^3.5.3
  - コードフォーマッター
- tailwindcss: ^4
  - ユーティリティファーストCSSフレームワーク
- typescript: ^5
  - 型安全なJavaScript





